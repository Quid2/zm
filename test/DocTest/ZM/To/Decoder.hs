{-# LANGUAGE ScopedTypeVariables#-}

{-# LANGUAGE NoMonomorphismRestriction, ExtendedDefaultRules#-}
module DocTest.ZM.To.Decoder where
import qualified DocTest
import Test.Tasty(TestTree,testGroup)
import ZM.To.Decoder
import ZM
import ZM.Abs
import ZM.Pretty
import Data.Word
import Data.Int
import ZM.Types
import ZM.Parser.Types

tests :: IO TestTree
tests = testGroup "ZM.To.Decoder" <$> sequence [  DocTest.test "src/ZM/To/Decoder.hs:41" "[ExpectedLine [LineChunk \"True\"]]" (DocTest.asPrint( decodeAbsTypeModel (absTypeModel (Proxy::Proxy Bool)) (flat True) == Right (Value {valType = TypeCon (AbsRef (SHAKE128_48 48 111 25 129 180 28)), valName = "True", valBits = [True], valFields = []}) )),  DocTest.test "src/ZM/To/Decoder.hs:44" "[ExpectedLine [LineChunk \"True\"]]" (DocTest.asPrint( decodeAbsTypeModel (absTypeModel (Proxy::Proxy (Maybe Bool))) (flat $ Just True) == Right (Value {valType = TypeApp (TypeCon (AbsRef (SHAKE128_48 218 104 54 119 143 212))) (TypeCon (AbsRef (SHAKE128_48 48 111 25 129 180 28))), valName = "Just", valBits = [True], valFields = [Value {valType = TypeCon (AbsRef (SHAKE128_48 48 111 25 129 180 28)), valName = "True", valBits = [True], valFields = []}]}) )),  DocTest.test "src/ZM/To/Decoder.hs:49" "[ExpectedLine [LineChunk \"Left (TooMuchSpace \",WildCardChunk]]" (DocTest.asPrint( decodeAbsTypeModel (absTypeModel (Proxy::Proxy Word8)) (flat 1.1) )),  DocTest.test "src/ZM/To/Decoder.hs:54" "[ExpectedLine [LineChunk \"True\"]]" (DocTest.asPrint( decodeAbsTypeModel (absTypeModel (Proxy::Proxy Word8)) (flat (11::Int)) == Right (Value {valType = TypeCon (AbsRef (SHAKE128_48 177 244 106 73 200 248)), valName = "V22", valBits = [False,False,False,True,False,True,True,False], valFields = []}) )),  DocTest.test "src/ZM/To/Decoder.hs:57" "[ExpectedLine [LineChunk \"True\"]]" (DocTest.asPrint( decodeAbsTypeModel (absTypeModel (Proxy::Proxy Word8)) (flat (11::Word8)) == Right (Value {valType = TypeCon (AbsRef (SHAKE128_48 177 244 106 73 200 248)), valName = "V11", valBits = [False,False,False,False,True,False,True,True], valFields = []}) )),  DocTest.test "src/ZM/To/Decoder.hs:62" "[ExpectedLine [LineChunk \"Right (Annotate (TypeApp (TypeCon (AbsRef (SHAKE128_48 218 104 54 119 143 212))) (TypeCon (AbsRef (SHAKE128_48 48 111 25 129 180 28))),[True]) (ConstrF \\\"Just\\\" (Left [Annotate (TypeCon (AbsRef (SHAKE128_48 48 111 25 129 180 28)),[False]) (ConstrF \\\"False\\\" (Left []))])))\"]]" (DocTest.asPrint( decodeAbsTypeModel (absTypeModel (Proxy::Proxy (Maybe Bool))) (flat $ Just False) )),  DocTest.test "src/ZM/To/Decoder.hs:65" "[ExpectedLine [LineChunk \"Right (Annotate (TypeCon (AbsRef (SHAKE128_48 6 109 181 42 241 69)),[]) (ConstrF \\\"Char\\\" (Left [Annotate (TypeCon (AbsRef (SHAKE128_48 36 18 121 156 153 241)),[]) (ConstrF \\\"Word32\\\" (Left [Annotate (TypeCon (AbsRef (SHAKE128_48 249 46 131 57 144 138)),[]) (ConstrF \\\"Word\\\" (Left [Annotate (TypeApp (TypeCon (AbsRef (SHAKE128_48 32 255 172 200 248 201))) (TypeApp (TypeCon (AbsRef (SHAKE128_48 191 45 28 134 235 32))) (TypeApp (TypeCon (AbsRef (SHAKE128_48 116 226 179 184 153 65))) (TypeCon (AbsRef (SHAKE128_48 244 201 70 51 74 126))))),[]) (ConstrF \\\"LeastSignificantFirst\\\" (Left [Annotate (TypeApp (TypeCon (AbsRef (SHAKE128_48 191 45 28 134 235 32))) (TypeApp (TypeCon (AbsRef (SHAKE128_48 116 226 179 184 153 65))) (TypeCon (AbsRef (SHAKE128_48 244 201 70 51 74 126)))),[False]) (ConstrF \\\"Elem\\\" (Left [Annotate (TypeApp (TypeCon (AbsRef (SHAKE128_48 116 226 179 184 153 65))) (TypeCon (AbsRef (SHAKE128_48 244 201 70 51 74 126))),[]) (ConstrF \\\"MostSignificantFirst\\\" (Left [Annotate (TypeCon (AbsRef (SHAKE128_48 244 201 70 51 74 126)),[True,True,False,False,False,False,True]) (ConstrF \\\"V97\\\" (Left []))]))]))]))]))]))])))\"]]" (DocTest.asPrint( decodeAbsTypeModel (absTypeModel (Proxy::Proxy Char)) (flat 'a') )),  DocTest.test "src/ZM/To/Decoder.hs:68" "[ExpectedLine [LineChunk \"True\"]]" (DocTest.asPrint( let Right (Value {valType = TypeApp (TypeCon (AbsRef (SHAKE128_48 184 205 19 24 113 152))) (TypeCon (AbsRef (SHAKE128_48 6 109 181 42 241 69))), valName = "Cons", valBits = [True] , valFields=_}) = decodeAbsTypeModel (absTypeModel (Proxy::Proxy String)) (flat "abc") in True ))]
