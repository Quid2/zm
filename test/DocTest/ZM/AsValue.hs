{-# LANGUAGE ScopedTypeVariables#-}

{-# LANGUAGE NoMonomorphismRestriction, ExtendedDefaultRules#-}
module DocTest.ZM.AsValue where
import qualified DocTest
import Test.Tasty(TestTree,testGroup)
import ZM.AsValue
import ZM
import ZM.Abs
import ZM.Pretty
import Data.Word
import Data.Int
import ZM.Types
import ZM.Parser.Types
import ZM.Type.Words(Word7(..))
import Numeric.Natural
import Test.QuickCheck.Instances.Natural
import Data.List

tests :: IO TestTree
tests = testGroup "ZM.AsValue" <$> sequence [  DocTest.testProp "src/ZM/AsValue.hs:77" ( \(w::Word8) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:79" ( \(w::Word16) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:81" ( \(w::Word32) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:83" ( \(w::Word64) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:85" ( \(w::Natural) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:87" ( \(w::Int8) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:89" ( \(w::Int16) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:91" ( \(w::Int32) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:93" ( \(w::Int64) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:95" ( \(w::Int) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:97" ( \(w::Word) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:103" ( \(w::Integer) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:105" ( \(w::Float) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:107" ( \(w::Double) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:109" ( \(a1::Double,a2::Bool) -> unValue (value (a1,a2)) == (a1,a2) ),  DocTest.testProp "src/ZM/AsValue.hs:111" ( \(a1::Double,a2::Bool,a3::Integer) -> unValue (value (a1,a2,a3)) == (a1,a2,a3) ),  DocTest.testProp "src/ZM/AsValue.hs:113" ( \(a1::Double,a2::Bool,a3::Integer,a4::Word8) -> unValue (value (a1,a2,a3,a4)) == (a1,a2,a3,a4) ),  DocTest.testProp "src/ZM/AsValue.hs:115" ( \(w::String) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:117" ( \(w::[Word16]) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:119" ( \(w::S.Seq Word16) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:127" ( \(w::M.Map Int32 Word8) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:144" ( \(w::Char) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:146" ( \(w::Maybe Bool) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:148" ( \(w::Either () Bool) -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:162" ( \(w::T.Text -> unValue (value w) == w ),  DocTest.testProp "src/ZM/AsValue.hs:164" ( \(w::T.Text -> unValue (value (UTF8Text w)) == (UTF8Text w) ),  DocTest.testProp "src/ZM/AsValue.hs:166" ( \(w::T.Text -> unValue (value (UTF16Text w)) == (UTF16Text w) ),  DocTest.test "src/ZM/AsValue.hs:121" "[ExpectedLine [LineChunk \"True\"]]" (DocTest.asPrint( let w=Array [] ::Array Float in unValue (value w) == w )),  DocTest.test "src/ZM/AsValue.hs:124" "[ExpectedLine [LineChunk \"True\"]]" (DocTest.asPrint( let w=Array [1,3..1000::Word16] in unValue (value w) == w )),  DocTest.test "src/ZM/AsValue.hs:129" "[ExpectedLine [LineChunk \"()\"]]" (DocTest.asPrint( unValue (value ()) )),  DocTest.test "src/ZM/AsValue.hs:132" "[ExpectedLine [LineChunk \"True\"]]" (DocTest.asPrint( unValue (value E.NoEncoding) == NoEncoding )),  DocTest.test "src/ZM/AsValue.hs:135" "[ExpectedLine [LineChunk \"True\"]]" (DocTest.asPrint( unValue (value E.FlatEncoding) == FlatEncoding )),  DocTest.test "src/ZM/AsValue.hs:138" "[ExpectedLine [LineChunk \"True\"]]" (DocTest.asPrint( unValue (value E.UTF8Encoding) == UTF8Encoding )),  DocTest.test "src/ZM/AsValue.hs:141" "[ExpectedLine [LineChunk \"True\"]]" (DocTest.asPrint( unValue (value E.UTF16LEEncoding) == UTF16LEEncoding )),  DocTest.test "src/ZM/AsValue.hs:150" "[ExpectedLine [LineChunk \"True\"]]" (DocTest.asPrint( let w=B.empty in unValue (value w) == w )),  DocTest.test "src/ZM/AsValue.hs:153" "[ExpectedLine [LineChunk \"True\"]]" (DocTest.asPrint( let w=B.pack (replicate 300 33) in unValue (value w) == w )),  DocTest.test "src/ZM/AsValue.hs:156" "[ExpectedLine [LineChunk \"True\"]]" (DocTest.asPrint( let w=L.pack (replicate 300 33) in unValue (value w) == w )),  DocTest.test "src/ZM/AsValue.hs:159" "[ExpectedLine [LineChunk \"True\"]]" (DocTest.asPrint( let w=SBS.pack (replicate 300 33) in unValue (value w) == w )),  DocTest.test "src/ZM/AsValue.hs:617" "[ExpectedLine [LineChunk \"0\"]]" (DocTest.asPrint( addLSFList [] )),  DocTest.test "src/ZM/AsValue.hs:620" "[ExpectedLine [LineChunk \"3\"]]" (DocTest.asPrint( addLSFList [3] )),  DocTest.test "src/ZM/AsValue.hs:623" "[ExpectedLine [LineChunk \"255\"]]" (DocTest.asPrint( addLSFList [127,1] )),  DocTest.test "src/ZM/AsValue.hs:655" "[ExpectedLine [LineChunk \"24\"]]" (DocTest.asPrint( bitsVal [True,True,False,False,False] ))]
